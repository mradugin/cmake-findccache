# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.sys.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        sys:
          - { os: windows-latest, shell: 'msys2 {0}', generator: Ninja          }
          - { os: windows-latest, shell: 'msys2 {0}', generator: Unix Makefiles }

          - { os: ubuntu-latest,  shell: bash,        generator: Ninja          }
          - { os: ubuntu-latest,  shell: bash,        generator: Unix Makefiles }

          - { os: macos-latest,   shell: bash,        generator: Ninja          }
          - { os: macos-latest,   shell: bash,        generator: Unix Makefiles }

        compiler:
          - { c: gcc,   cpp: g++,     msys: mingw64 }
          - { c: clang, cpp: clang++, msys: clang64 }
        build_type: [Debug]

        include:
          - sys: { os: windows-latest, shell: bash, generator: Visual Studio 17 2022 }
            compiler: { c: cl,    cpp: cl      }
            build_type: Debug
          - sys: { os: macos-latest,   shell: bash, generator: Xcode                 }
            compiler: { c: clang, cpp: clang++ }
            build_type: Debug

    defaults:
      run:
        shell: ${{ matrix.sys.shell }}

    steps:
    - uses: actions/checkout@v4

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.13
      with:
        restore: false
        save: false
        verbose: 2
        variant: ccache
  
    - name: Install ninja (ubuntu)
      if: ${{ matrix.sys.os == 'ubuntu-latest' && matrix.sys.generator == 'Ninja' }}
      run: |
        sudo apt update
        sudo apt -y install ninja-build

    - name: Install ninja (macos)
      if: ${{ matrix.sys.os == 'macos-latest' && matrix.sys.generator == 'Ninja' }}
      run: |
        brew install ninja

    - name: Install MSYS2 (windows)
      if: ${{ matrix.sys.shell == 'msys2 {0}' }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.compiler.msys }}
        update: true
        install: >-
          git
          make
          ccache
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "source-dir=${{ github.workspace }}/example" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cpp }} -DCMAKE_C_COMPILER=${{ matrix.compiler.c }} -S "${{ steps.strings.outputs.source-dir }}" -B "${{ steps.strings.outputs.build-output-dir }}" -G "${{matrix.sys.generator}}"

    - name: Build (empty cache)
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --verbose
        ccache --show-stats

    - name: Build (cached)
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --target clean --verbose
        cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --verbose
        ccache --show-stats

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}
