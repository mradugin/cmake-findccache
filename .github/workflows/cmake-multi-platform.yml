# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        # os: [windows-2019]
        # build_type: [Debug]
        # c_compiler: [cl]
        # include:
        #   - os: windows-2019
        #     c_compiler: cl
        #     cpp_compiler: cl
        #os: [ubuntu-latest, windows-latest, macos-latest]
        #build_type: [Debug]
        #c_compiler: [gcc, clang, cl]
        #generator: [Ninja, Visual Studio 2022, Unix Makefiles, Xcode]
        include:
          - os: windows-latest
            generator: Visual Studio 17 2022
            c_compiler: cl
            cpp_compiler: cl
            build_type: Debug
          - os: windows-latest
            generator: Ninja
            c_compiler: cl
            cpp_compiler: cl
            build_type: Debug
          - os: ubuntu-latest
            generator: Ninja
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Debug
          - os: ubuntu-latest
            generator: Unix Makefiles
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Debug
          - os: ubuntu-latest
            generator: Ninja
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Debug
          - os: ubuntu-latest
            generator: Unix Makefiles
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Debug
          - os: macos-latest
            generator: Ninja
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Debug
          - os: macos-latest
            generator: Xcode
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Debug
    steps:
    - uses: actions/checkout@v4

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.13
      with:
        restore: false
        save: false
        verbose: 2
        variant: ccache
  
    - name: Install ninja (ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.generator == 'Ninja'
      run: |
        sudo apt update
        sudo apt -y install ninja

    - name: Install ninja (macos)
      if: matrix.os == 'macos-latest' && matrix.generator == 'Ninja'
      run: |
        brew install ninja

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "source-dir=${{ github.workspace }}/example" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -S "${{ steps.strings.outputs.source-dir }}" -B "${{ steps.strings.outputs.build-output-dir }}" -G "${{matrix.generator}}"

    - name: Build (no cache)
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --verbose
        ccache --show-stats

    - name: Build (cached)
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --target clean --verbose
        cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --verbose
        ccache --show-stats

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}
